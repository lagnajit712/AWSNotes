The Java programming language is statically-typed, which means that all variables must first be declared before they can be used. 
Java programming language supports seven other primitive data types. A primitive type is predefined by the language and is named by a reserved keyword. 
Primitive values do not share state with other primitive values. 

A nested class is a member of its enclosing class.
Non-static nested classes (inner classes) have access to other members of the enclosing class, even if they are declared private.
Static nested classes do not have access to other members of the enclosing class.
A static nested class interacts with the instance members of its outer class (and other classes) just like any other top-level class. 
In effect, a static nested class is behaviorally a top-level class that has been nested in another top-level class for packaging convenience.
Static nested classes are accessed using the enclosing class name:

OuterClass.StaticNestedClass
For example, to create an object for the static nested class, use this syntax:

OuterClass.StaticNestedClass nestedObject =
     new OuterClass.StaticNestedClass();

There are two special kinds of inner classes: local classes and anonymous classes.
If a declaration of a type (such as a member variable or a parameter name) in a particular scope (such as an inner class or a method definition) 
has the same name as another declaration in the enclosing scope, then the declaration shadows the declaration of the enclosing scope.
You cannot refer to a shadowed declaration by its name alone. 
Serialization of inner classes, including local and anonymous classes, is strongly discouraged.
When the Java compiler compiles certain constructs, such as inner classes, it creates synthetic constructs;
these are classes, methods, fields, and other constructs that do not have a corresponding construct in the source code. 
Synthetic constructs enable Java compilers to implement new Java language features without changes to the JVM. 
However, synthetic constructs can vary among different Java compiler implementations, which means that .class files can vary among different
implementations as well.

In addition, a local class has access to local variables. However, a local class can only access local variables that are declared final. 
When a local class accesses a local variable or parameter of the enclosing block, it captures that variable or parameter. 

