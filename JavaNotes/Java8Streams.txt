Java Streams

Stream is a java typed interface, it efficiently process large amount of data.
Leverage the power of multicore CPU.
public interface Stream<T> extends BaseStream<T,Stream<T>>{


}
Stream interface methods:-

1)  boolean allMatch(Predicate<? super T> predicate);
		Returns whether all elements of this stream match the provided predicate.
		May not evaluate the predicate on all elements if not necessary for determining the result.
		If the stream is empty then {@code true} is returned and the predicate is not evaluated.
2)  boolean anyMatch(Predicate<? super T> predicate);
		Returns whether any elements of this stream match the provided predicate.
		May not evaluate the predicate on all elements if not necessary for determining the result.
		If the stream is empty then {@code false} is returned and the predicate is not evaluated.
3)  <R, A> R collect(Collector<? super T, A, R> collector);
        Performs a <a href="package-summary.html#MutableReduction">mutable reduction</a> operation on the elements of this stream using a {@code Collector}. 
		A {@code Collector} encapsulates the functions used as arguments to {@link #collect(Supplier, BiConsumer, BiConsumer)}, allowing for reuse of
		 collection strategies and composition of collect operations such as multiple-level grouping or partitioning

4)  <R> R collect(Supplier<R> supplier,BiConsumer<R, ? super T> accumulator,BiConsumer<R, R> combiner);





boolean noneMatch(Predicate<? super T> predicate);
		Returns whether no elements of this stream match the provided predicate.
		May not evaluate the predicate on all elements if not necessary for determining the result.
		If the stream is empty then {@code true} is returned and the predicate is not evaluated.