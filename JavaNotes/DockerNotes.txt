What is Docker ? – Docker is a containerization platform that packages your application and all its dependencies together in the form of a docker container to ensure that your application works seamlessly in any environment.
What is Container ? – Docker Container is a standardized unit which can be created on the fly to deploy a particular application or environment. It could be an Ubuntu container, CentOs container, etc. to full-fill the requirement from an operating system point of view. Also, it could be an application oriented container like CakePHP container or a Tomcat-Ubuntu container etc.
What is Docker Container?
Containers are the ready applications created from Docker Images or you can say a Docker Container is a running instance of a Docker Image and they hold the entire package needed to run the application. This happens to be the ultimate utility of Docker. 

Dockerfile, Docker Image And Docker Container:
	A Docker Image is created by the sequence of commands written in a file called as Dockerfile.
	When this Dockerfile is executed using a docker command it results into a Docker Image with a name.
	When this Image is executed by “docker run” command it will by itself start whatever application or service it must start on its execution.

Docker Architecture:
It consists of a Docker Engine which is a client-server application with three major components:

	1) Docker Daemon: A persistent background process that manages Docker images, containers, networks, and storage volumes.
					  The Docker daemon constantly listens for Docker API requests and processes them.A server which is a type of long-running program called a daemon process (the docker command).
	2) Docker Engine REST API: An API is used by applications to interact with the Docker daemon. It can be accessed by an HTTP client.
	3) Docker CLI: A command-line interface client for interacting with the Docker daemon. 
					It significantly simplifies how you manage container instances and is one of the key reasons why developers love using Docker.
					The CLI uses the Docker REST API to control or interact with the Docker daemon through scripting or direct CLI commands.
	Many other Docker applications use the underlying API and CLI.
	
Docker Compose:
	Docker Compose is basically used to run multiple Docker Containers as a single server. 
	Let me give you an example:
	Suppose if I have an application which requires WordPress, Maria DB and PHP MyAdmin. I can create one file which would start both the containers as a service without the need to start each one separately. It is really useful especially if you have a microservice architecture.
	
Docker Architecture
The architecture of Docker uses a client-server model and consists of the Docker’s Client, Docker Host, Network and Storage components, and the Docker Registry/Hub. Let’s look at each of these in some detail.

	Docker’s Client
		Docker users can interact with Docker through a client. When any docker commands runs, the client sends them to dockerd daemon, which carries them out. Docker API is used by Docker commands. It is possible for Docker client to communicate with more than one daemon.

	Docker Host
		The Docker host provides a complete environment to execute and run applications. It comprises of the Docker daemon, Images, Containers, Networks, and Storage. As previously mentioned, the daemon is responsible for all container-related actions and receives commands via the CLI or the REST API. It can also communicate with other daemons to manage its services.

	Docker Objects 
		1. Images
			Images are nothing but a read-only binary template that can build containers. They also contain metadata that describe the container’s capabilities and needs. Images are used to store and ship applications. An image can be used on its own to build a container or customized to add additional elements to extend the current configuration.
			You can share the container images across teams within an enterprise with the help of a private container registry, or share it with the world using a public registry like Docker Hub. Images are the core element of the Docker experience as they enable collaboration between developers in a way that was not possible before
		2. Containers
			Containers are sort of encapsulated environments in which you run applications. Container is defined by the image and any additional configuration options provided on starting the container, including and not limited to the network connections and storage options. Containers only have access to resources that are defined in the image, unless additional access is defined when building the image into a container.
		3. Networks
			Docker networking is a passage through which all the isolated container communicate. There are mainly five network drivers in docker:

			Bridge: It is the default network driver for a container. You use this network when your application is running on standalone containers, i.e. multiple containers communicating with the same docker host.

			Host: This driver removes the network isolation between docker containers and docker host. You can use it when you don’t need any network isolation between host and container.

			Overlay: This network enables swarm services to communicate with each other. You use it when you want the containers to run on different Docker hosts or when you want to form swarm services by multiple applications.

			None: This driver disables all the networking.

			macvlan: This driver assigns mac address to containers to make them look like physical devices. It routes the traffic between containers through their mac addresses. You use this network when you want the containers to look like a physical device, for example, while migrating a VM setup.

			You can also create a new image based on the current state of a container. Since containers are much smaller than VMs, they can be spun in a matter of seconds, and result in much better server density
		4. Storage
			You can store data within the writable layer of a container but it requires a storage driver. Being non-persistent, it perishes whenever the container is not running. Moreover, it is not easy to transfer this data. With respect to persistent storage, Docker offers four options:

				Data Volumes: They provide the ability to create persistent storage, with the ability to rename volumes, list volumes, and also list the container that is associated with the volume. Data Volumes are placed on the host file system, outside the containers copy on write mechanism and are fairly efficient.

				Volume Container: It is an alternative approach wherein a dedicated container hosts a volume and to mount that volume to other containers. In this case, the volume container is independent of the application container and therefore you can share it across more than one container.

				Directory Mounts: Another option is to mount a host’s local directory into a container. In the previously mentioned cases, the volumes would have to be within the Docker volumes folder, whereas when it comes to Directory Mounts any directory on the Host machine can be used as a source for the volume.

				Storage Plugins: Storage Plugins provide the ability to connect to external storage platforms. These plugins map storage from the host to an external source like a storage array or an appliance. You can see a list of storage plugins on Docker’s Plugin page.
	 Docker’s Registry

		Docker registries are services that provide locations from where you can store and download images. In other words, a Docker registry contains Docker repositories that host one or more Docker Images. Public Registries include two components namely the Docker Hub and Docker Cloud. You can also use Private Registries. The most common commands when working with registries include: docker push, docker pull, docker run
		
Docker Commands
1. docker –version This command is used to get the currently installed version of docker
2. docker pull Usage: docker pull <image name> This command is used to pull images from the docker repository(hub.docker.com)
3. docker run Usage: docker run -it -d <image name> This command is used to create a container from an image
4. docker ps This command is used to list the running containers
5. docker ps -a This command is used to show all the running and exited containers
6. docker exec Usage: docker exec -it <container id> bash This command is used to access the running container
7. docker stop Usage: docker stop <container id> 	This command stops a running container
8. docker killUsage: docker kill <container id>This command kills the container by stopping its execution immediately. 
	The difference between ‘docker kill’ and ‘docker stop’ is that ‘docker stop’ gives the container time to shutdown gracefully, in situations when it is taking too much time for getting the container to stop, one can opt to kill it.
9. docker commit Usage: docker commit <conatainer id> <username/imagename>This command creates a new image of an edited container on the local system
10. docker login This command is used to login to the docker hub repository
11. docker push Usage: docker push <username/image name> This command is used to push an image to the docker hub repository
12. docker images This command lists all the locally stored docker images
13. docker rm Usage: docker rm <container id> This command is used to delete a stopped container
14. docker rmi Usage: docker rmi <image-id> This command is used to delete an image from local storage
15. docker build Usage: docker build <path to docker file> This command is used to build an image from a specified docker file