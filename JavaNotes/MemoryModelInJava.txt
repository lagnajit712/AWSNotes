
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ***************************************************************  Memory Management in Java *******************************************************************************
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

The JVM loads the code, verifies the code, executes the code, manages memory (this includes allocating memory from the Operating System (OS), managing Java allocation including heap compaction and removal of garbage objects) and finally provides the runtime environment.

The young generation is the place where all the new objects are created. When the young generation is filled, garbage collection is performed. 
This garbage collection is called Minor GC. Young Generation is divided into three parts – Eden Memory and two Survivor Memory spaces.	

Old Generation memory contains the objects that are long-lived and survived after many rounds of Minor GC. 
Usually, garbage collection is performed in Old Generation memory when it’s full. Old Generation Garbage Collection is called Major GC and usually takes a longer time.

Permanent Generation or “Perm Gen” contains the application metadata required by the JVM to describe the classes and methods used in the application.
Perm Gen is populated by JVM at runtime based on the classes used by the application. Perm Gen also contains Java SE library classes and methods.
Perm Gen objects are garbage collected in a full garbage collection.
From Java 8 perm Gen is replaced
Two new flags can be used to set the size of the metaspace, they are: “-XX:MetaspaceSize” and “-XX:MaxMetaspaceSize”. The theme behind the Metaspace is that the lifetime of classes and their metadata matches the lifetime of the classloaders. That is, as long as the classloader is alive, the metadata remains alive in the Metaspace and can’t be freed.
 
Method Area is part of space in the Perm Gen and used to store class structure (runtime constants and static variables) and code for methods and constructors.

Memory Pools are created by JVM memory managers to create a pool of immutable objects if the implementation supports it. String Pool is a good example of this kind of memory pool. Memory Pool can belong to Heap or Perm Gen, depending on the JVM memory manager implementation.

Runtime constant pool is per-class runtime representation of constant pool in a class. It contains class runtime constants and static methods. Runtime constant pool is part of the method area.

---------------------------------------------------------------------------------------------------------
VM Switch	  VM Switch Description
---------------------------------------------------------------------------------------------------------
-Xms	           For setting the initial heap size when JVM starts
-Xmx	           For setting the maximum heap size.
-Xmn	           For setting the size of the Young Generation, rest of the space goes for Old Generation.
-XX:PermGen	       For setting the initial size of the Permanent Generation memory
-XX:MaxPermGen     For setting the maximum size of Perm Gen
-XX:SurvivorRatio  For providing ratio of Eden space and Survivor Space, for example if Young Generation
                   size is 10m and VM switch is -XX:SurvivorRatio=2 then 5m will be reserved for Eden Space and 2.5m each 
			       for both the Survivor spaces. The default value is 8.
-XX:NewRatio       For providing ratio of old/new generation sizes. The default value is 2.
---------------------------------------------------------------------------------------------------------

Marking: This is the first step where garbage collector identifies which objects are in use and which ones are not in use.
Normal Deletion: Garbage Collector removes the unused objects and reclaim the free space to be allocated to other objects.
Deletion with Compacting: For better performance, after deleting unused objects, all the survived objects can be moved to be together. 
This will increase the performance of allocation of memory to newer objects.

There are two problems with a simple mark and delete approach.

First one is that it’s not efficient because most of the newly created objects will become unused
Secondly objects that are in-use for multiple garbage collection cycle are most likely to be in-use for future cycles too.

Types:-

There are five types of garbage collection types that we can use in our applications. We just need to use the JVM switch to enable the garbage collection strategy for the application. Let’s look at each of them one by one.

Serial GC (-XX:+UseSerialGC): Serial GC uses the simple mark-sweep-compact approach for young and old generations garbage collection i.e Minor and Major GC.Serial GC is useful in client machines such as our simple stand-alone applications and machines with smaller CPU. It is good for small applications with low memory footprint.

Parallel GC (-XX:+UseParallelGC): Parallel GC is same as Serial GC except that is spawns N threads for young generation garbage collection where N is the number of CPU cores in the system. We can control the number of threads using -XX:ParallelGCThreads=n JVM option.Parallel Garbage Collector is also called throughput collector because it uses multiple CPUs to speed up the GC performance. Parallel GC uses a single thread for Old Generation garbage collection.

Parallel Old GC (-XX:+UseParallelOldGC): This is same as Parallel GC except that it uses multiple threads for both Young Generation and Old Generation garbage collection

Concurrent Mark Sweep (CMS) Collector (-XX:+UseConcMarkSweepGC): CMS Collector is also referred as concurrent low pause collector. It does the garbage collection for the Old generation. CMS collector tries to minimize the pauses due to garbage collection by doing most of the garbage collection work concurrently with the application threads.CMS collector on the young generation uses the same algorithm as that of the parallel collector. This garbage collector is suitable for responsive applications where we can’t afford longer pause times. We can limit the number of threads in CMS collector using -XX:ParallelCMSThreads=n JVM option.

G1 Garbage Collector (-XX:+UseG1GC): The Garbage First or G1 garbage collector is available from Java 7 and its long term goal is to replace the CMS collector. The G1 collector is a parallel, concurrent, and incrementally compacting low-pause garbage collector.Garbage First Collector doesn’t work like other collectors and there is no concept of Young and Old generation space. It divides the heap space into multiple equal-sized heap regions. When a garbage collection is invoked, it first collects the region with lesser live data, hence “Garbage First”. 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ***************************************************************  Memory Allocation in JVM *******************************************************************************
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Class Loader:It is a subsystem of JVM which is used to load class files.It is mainly responsible for three activities.
	Loading
	Linking
	Initialization
Class(Method) Area: It stores class level data of every class such as the runtime constant pool, field and method data, the code for methods.
Heap: It is used to allocate memory to objects at run time
Stack:
	Each thread has a private JVM stack, created at the same time as thread. It is used to store data and partial results which will be needed while returning value for method and performing dynamic linking.
	Java Stack stores frames and a new frame is created each time at every invocation of the method.
	A frame is destroyed when its method invocation completes
Program Counter Register: Each JVM thread which carries out the task of a specific method has a program counter register associated with it.
						  The non-native method has a PC which stores the address of the available JVM instruction whereas, in a native method, the value of the program counter is undefined. PC register is capable of storing the return address or a native pointer on some specific platform.
Native method Stacks: Also called as C stacks, native method stacks are not written in Java language.
					  This memory is allocated for each thread when its created And it can be of a fixed or dynamic nature.