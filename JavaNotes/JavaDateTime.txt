What’s wrong with the old Java Date API?
java.util.Date has some serious design flows, from the day it was introduced. Many of its methods were deprecated since Java 1.1 and ported to (abstract) java.util.Calendar and java.util.GregorianCalendar.

java.util.Date is poorly understood by developers. It’s been badly abused by library authors, adding further to the confusion. A Date instance represents an instant in time, not a date. Importantly, that means:

It doesn’t have a time zone.
It doesn’t have a format.
It doesn’t have a calendar system.
Some other problems are:

It rates years as two digits since 1900. There are many workarounds in the Java world around this banal design decision, like handling years before 1900.
Months are zero indexed (0 – January, 11 – December). Not very intuitive and led to many off-by-one errors.
All classes in this old API are mutable. As a result, any time you want to give a date back (say, as an instance structure) you need to return a clone of that date instead of the date object itself (since otherwise, people can mutate your structure). Date formatting classes are also not thread safe. You have to always take care about that or it could lead to some unexpected behaviors.
Date represents a DateTime, but in order to defer to those in SQL land, there’s another subclass java.sql.Date, which represents a single day (though without a timezone associated with it).
It implicitly uses the system-local time zone in many places – including toString() – which confuses many developers.
New API in a nutshell
The new Date and Time API is moved to java.time package and Joda time format is followed. Classes are immutable and hence thread-safe. There are many static methods you can use directly. For every date-time manipulation, there is probably already implemented method to use. The new java.time package contains all the classes for date, time, date/time, time zones, instants, duration, and clocks manipulation. Example classes:

Clock provides access to the current instant, date and time using a time-zone.
LocaleDate holds only the date part without a time-zone in the ISO-8601 calendar system.
LocaleTime holds only the time part without time-zone in the ISO-8601 calendar system.
The LocalDateTime combines together LocaleDate and LocalTime and holds a date with time but without a time-zone in the ISO-8601 calendar system.
ZonedDateTime holds a date with time and with a time-zone in the ISO-8601 calendar system.
Duration class represents an amount of time in terms of seconds and nanoseconds. It makes very easy to compute the different between two time values. Period, on the other hand, performs a date based comparison between two dates.
Examples:

// Get the local date
final LocalDate date = LocalDate.now();
