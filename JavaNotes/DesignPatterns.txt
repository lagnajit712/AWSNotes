Creational Patterns:-
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Builder pattern aims to “Separate the construction of a complex object from its representation so that the same construction process can create different representations.”

Singleton Pattern

Abstract Factory 

Prototype Pattern

Factory Pattern


Structural Patterns:-
------------------------------------------------------------------------------------------------------------------
An Adapter Pattern says that just "converts the interface of a class into another interface that a client wants".
In other words, to provide the interface according to client requirement while using the services of a class with a different interface.
There are the following specifications for the adapter pattern:
Target Interface: This is the desired interface class which will be used by the clients.
Adapter class: This class is a wrapper class which implements the desired target interface and modifies the specific request available from the Adaptee class.
Adaptee class: This is the class which is used by the Adapter class to reuse the existing functionality and modify them for desired use.
Client: This class will interact with the Adapter class.

The Adapter Pattern is also known as Wrapper.
	It allows two or more previously incompatible objects to interact.
	It allows re-usability of existing functionality.

A Bridge Pattern says that just "decouple the functional abstraction from the implementation so that the two can vary independently".
The Bridge Pattern is also known as Handle or Body.
Following participants constitute the bridge design pattern.
Abstraction (abstract class) It defined the abstract interface i.e. behavior part. It also maintains the Implementer reference.
RefinedAbstraction (normal class) It extends the interface defined by Abstraction.
Implementer (interface) It defines the interface for implementation classes. This interface does not need to correspond directly to abstraction interface and can be very different. 
						Abstraction imp provides an implementation in terms of operations provided by Implementer interface.
ConcreteImplementor (normal class)It implements the Implementer interface.
Advantage :-
	It enables the separation of implementation from the interface.
	It improves the extensibility.
	It allows the hiding of implementation details from the client.

A Composite Pattern says that just "allow clients to operate in generic manner on objects that may or may not represent a hierarchy of objects".
The 4 elements of composite pattern.
1) Component
	Declares interface for objects in composition.
	Implements default behaviour for the interface common to all classes as appropriate.
	Declares an interface for accessing and managing its child components.
2) Leaf
	Represents leaf objects in composition. A leaf has no children.
	Defines behaviour for primitive objects in the composition.
3) Composite
	Defines behaviour for components having children.
	Stores child component.
	Implements child related operations in the component interface.
4) Client
	Manipulates objects in the composition through the component interface.
Advantage of Composite Design Pattern
	It defines class hierarchies that contain primitive and complex objects.
	It makes easier to you to add new kinds of components.
	It provides flexibility of structure with manageable class or interface.
The composite pattern defines class hierarchies consisting of individual objects and composite objects.
Clients treat primitive and composite objects uniformly through a component interface which makes client code simple.
Adding new components can be easy and client code does not need to be changed since client deals with the new components through the component interface.
Composite hierarchy can be traversed with Iterator design pattern.

A Decorator Pattern says that just "attach a flexible additional responsibilities to an object dynamically".
In other words, The Decorator Pattern uses composition instead of inheritance to extend the functionality of an object at runtime.
Following are the participants of the Decorator Design pattern:
	Component – this is the wrapper which can have additional responsibilities associated with it at runtime.
	Concrete component– is the original object to which the additional responsibilities are added in program.
	Decorator-this is an abstract class which contains a reference to the component object and also implements the component interface.
	Concrete decorator-they extend the decorator and builds additional functionality on top of the Component class.
Difference between Adapter and Decorator ?
AdapterPattern is used to convert the interface of an object into something else. DecoratorPattern is used to extend the functionality of an object while maintaining its interface. Both of these are probably sometimes called Wrapper Pattern since both of them do “wrap” an object.
Advantages:-
	It provides greater flexibility than static inheritance.
	It enhances the extensibility of the object, because changes are made by coding new classes.
	It simplifies the coding by allowing you to develop a series of functionality from targeted classes instead of coding all of the behaviour into the object.

A Facade Pattern says that just "just provide a unified and simplified interface to a set of interfaces in a subsystem, therefore it hides the complexities of the subsystem from the client".In other words, Facade Pattern describes a higher-level interface that makes the sub-system easier to use.
Practically, every Abstract Factory is a type of Facade.
It shields the clients from the complexities of the sub-system components.
It promotes loose coupling between subsystems and its clients.

As per GoF definition, flyweight design pattern enables use sharing of objects to support large numbers of fine-grained objects efficiently.
A flyweight is a shared object that can be used in multiple contexts simultaneously. The flyweight acts as an independent object in each context.
We can use flyweight pattern in following scenarios:
When we need a large number of similar objects that are unique in terms of only a few parameters and most of the stuffs are common in general.
We need to control the memory consumption by large number of objects – by creating fewer objects and sharing them across.
A flyweight objects essentially has two kind of attributes – intrinsic and extrinsic.
An intrinsic state attribute is stored/shared in the flyweight object, and it is independent of flyweight’s context. As the best practice, we should make intrinsic states immutable.
An extrinsic state varies with flyweight’s context, which is why they cannot be shared. Client objects maintain the extrinsic state, and they need to pass this to a flyweight object during object creation.


Simply, proxy means an object representing another object.
According to GoF, a Proxy Pattern "provides the control for accessing the original object".
So, we can perform many operations like hiding the information of original object, on demand loading etc.
It can be used in Virtual Proxy scenario---Consider a situation where there is multiple database call to extract huge size image. Since this is an expensive operation so here we can use the proxy pattern which would create multiple proxies and point to the huge size memory consuming object for further processing. The real object gets created only when a client first requests/accesses the object and after that we can just refer to the proxy to reuse the object. This avoids duplication of the object and hence saving memory.
It can be used in Protective Proxy scenario---It acts as an authorization layer to verify that whether the actual user has access the appropriate content or not. For example, a proxy server which provides restriction on internet access in office. Only the websites and contents which are valid will be allowed and the remaining ones will be blocked.
It can be used in Remote Proxy scenario---A remote proxy can be thought about the stub in the RPC call. The remote proxy provides a local representation of the object which is present in the different address location. Another example can be providing interface for remote resources such as web service or REST resources.
It can be used in Smart Proxy scenario---A smart proxy provides additional layer of security by interposing specific actions when the object is accessed. For example, to check whether the real object is locked or not before accessing it so that no other objects can change it.

Behavioural Pattern :-
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
A Command Pattern or Encapsulating Invocation says that "encapsulate a request under an object as a command and pass it to invoker object. Invoker object looks for the appropriate object which can handle this command and pass the command to the corresponding object and that object executes the command".
It is also known as Action or Transaction.
It separates the object that invokes the operation from the object that actually performs the operation.
It makes easy to add new commands, because existing classes remain unchanged.

A Strategy Pattern says that "defines a family of functionality, encapsulate each one, and make them interchangeable".
The Strategy Pattern is also known as Policy.
It provides a substitute to subclassing.
It defines each behavior within its own class, eliminating the need for conditional statements.
It makes it easier to extend and incorporate new behavior without changing the application.

